# -*- coding: utf-8 -*-
"""Mushroom Classifier App

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bU6pk01ab0yy6-sSeqabn5m2AtNQb_zi
"""

import streamlit as st
from PIL import Image
import numpy as np
import tensorflow as tf
import io

# --- Configuration ---
# Set the page configuration for the Streamlit app.
# This should be the first Streamlit command in your script.
st.set_page_config(
    page_title="Mushroom Classifier",
    page_icon="üçÑ",
    layout="centered",
    initial_sidebar_state="auto",
)

# --- Model Loading and Class Definitions ---

# IMPORTANT: Make sure your model file is in the same directory as this script,
# or provide the full path to the file.
@st.cache_resource
def load_model():
    """Loads the trained TensorFlow model."""
    # Replace 'your_mushroom_model.h5' with the actual filename of your model.
    try:
        model = tf.keras.models.load_model('mushroom_cnn.h5')
        return model
    except Exception as e:
        st.error(f"Error loading model: {e}")
        return None

# IMPORTANT: Define the class names your model was trained on.
# The order MUST exactly match the output of your model's prediction.
CLASS_NAMES = [
    "amanita augusta",
    "Amanita cirtina",
    "agaricus xanthodermus",
    "Hypholama lateritium",
    "lactarius torminosus",
    "flammulina velutipes",
    "boletus edulis",
    "clitocybe nuda",
    "armillaria mellea",
    "leccinum scabrum",
]

# IMPORTANT: Define the toxicity information for each of your classes.
TOXICITY_INFO = {
    "amanita augusta": "toxic",
    "Amanita cirtina": "toxic",
    "agaricus xanthodermus": "toxic",
    "Hypholama lateritium": "toxic",
    "lactarius torminosus": "toxic",
    "flammulina velutipes": "safe",
    "boletus edulis": "safe",
    "clitocybe nuda": "safe",
    "armillaria mellea": "safe",
    "leccinum scabrum": "safe",
}

# --- Main Application ---

def main():
    """
    The main function that runs the Streamlit application.
    """
    # Load the (mock) model
    model = load_model()

    if model is None:
        st.stop() # Don't run the app if the model failed to load

    # --- UI Components ---
    st.title("üçÑ Mushroom Species & Toxicity Classifier")
    st.markdown("""
        Welcome! Upload an image of a mushroom, and this application will predict its species and whether it's edible or poisonous.

        **Disclaimer:** This is a prototype and for educational purposes only. **Do not eat any mushroom based on this classification.** Always consult with an expert.
    """)

    # Image uploader
    uploaded_file = st.file_uploader(
        "Choose a mushroom image...",
        type=["jpg", "jpeg", "png"]
    )

    if uploaded_file is not None:
        # To read file as bytes:
        bytes_data = uploaded_file.getvalue()

        # Display the uploaded image
        st.image(bytes_data, caption='Uploaded Image.', use_column_width=True)
        st.write("") # Add a little space

        # --- Image Preprocessing and Prediction ---
        st.write("Classifying...")

        with st.spinner('Analyzing the mushroom...'):
            try:
                # Open the image using PIL
                image = Image.open(io.BytesIO(bytes_data)).convert('RGB')

                # IMPORTANT: Change (224, 224) to your model's expected input size.
                target_size = (224, 224)
                image = image.resize(target_size)

                # Convert the image to a numpy array and normalize it
                image_array = np.array(image) / 255.0

                # Add a batch dimension
                image_batch = np.expand_dims(image_array, axis=0)

                # Make a prediction
                predictions = model.predict(image_batch)
                predicted_index = np.argmax(predictions[0])
                confidence = np.max(predictions[0])

                # Get the results
                predicted_species = CLASS_NAMES[predicted_index]
                toxicity = TOXICITY_INFO.get(predicted_species, "Unknown")

                # --- Display Results ---
                st.success("Classification Complete!")
                st.markdown(f"### Predicted Species: **{predicted_species}**")
                st.markdown(f"### Confidence: **{confidence:.2%}**")

                if "Poisonous" in toxicity or "Psychoactive" in toxicity:
                    st.error(f"### Toxicity: **{toxicity}** ‚ò†Ô∏è")
                else:
                    st.success(f"### Toxicity: **{toxicity}** ‚úÖ")

                st.info("Remember to always be cautious and consult a mycologist before consuming any wild mushroom.")

            except Exception as e:
                st.error(f"An error occurred during processing: {e}")

# Entry point for the script
if __name__ == '__main__':
    main()
